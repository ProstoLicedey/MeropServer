{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.suppressBrowserZooming = void 0;\n/**\n * This is not used by the `ViewPort`, but if you have HTML elements around the\n * `ViewPort` you may want to suppress zooming or panning on the whole page. This\n * function will do that.\n *\n * @returns A callback which will stop the suppression.\n */\nfunction suppressBrowserZooming() {\n  const handleWheel = e => {\n    if (e.defaultPrevented) {\n      return;\n    }\n    // We just want to suppress pinch-gestures on desktop browsers. We have to\n    // look for whether the control key is pressed in this event... for whatever\n    // reason, that can distinguish scrolling and pinching in this event.\n    if (e.ctrlKey) {\n      e.preventDefault();\n    }\n  };\n  const handleGestureStartForSafari = e => {\n    if (e.defaultPrevented) {\n      return;\n    }\n    e.preventDefault();\n  };\n  const handleGestureChangeForSafari = e => {\n    if (e.defaultPrevented) {\n      return;\n    }\n    e.preventDefault();\n  };\n  const handleTouchMove = e => {\n    if (e.defaultPrevented) {\n      return;\n    }\n    if (e.touches.length === 2) {\n      e.preventDefault();\n    }\n  };\n  document.addEventListener('wheel', handleWheel, {\n    passive: false\n  });\n  document.addEventListener('gesturestart', handleGestureStartForSafari);\n  document.addEventListener('gesturechange', handleGestureChangeForSafari);\n  document.addEventListener('touchmove', handleTouchMove, {\n    passive: false\n  });\n  return () => {\n    document.removeEventListener('wheel', handleWheel);\n    document.removeEventListener('gesturestart', handleGestureStartForSafari);\n    document.removeEventListener('gesturechange', handleGestureChangeForSafari);\n    document.removeEventListener('touchmove', handleTouchMove);\n  };\n}\nexports.suppressBrowserZooming = suppressBrowserZooming;","map":{"version":3,"names":["suppressBrowserZooming","handleWheel","e","defaultPrevented","ctrlKey","preventDefault","handleGestureStartForSafari","handleGestureChangeForSafari","handleTouchMove","touches","length","document","addEventListener","passive","removeEventListener","exports"],"sources":["C:\\Users\\mi200\\WebstormProjects\\Merops\\client\\node_modules\\react-zoomable-ui\\src\\suppressBrowserZooming.ts"],"sourcesContent":["export type CancelSuppressZoomingCallback = () => void;\n\n/**\n * This is not used by the `ViewPort`, but if you have HTML elements around the\n * `ViewPort` you may want to suppress zooming or panning on the whole page. This\n * function will do that.\n *\n * @returns A callback which will stop the suppression.\n */\nexport function suppressBrowserZooming(): CancelSuppressZoomingCallback {\n  const handleWheel = (e: WheelEvent) => {\n    if (e.defaultPrevented) {\n      return;\n    }\n\n    // We just want to suppress pinch-gestures on desktop browsers. We have to\n    // look for whether the control key is pressed in this event... for whatever\n    // reason, that can distinguish scrolling and pinching in this event.\n    if (e.ctrlKey) {\n      e.preventDefault();\n    }\n  };\n  const handleGestureStartForSafari = (e: any) => {\n    if (e.defaultPrevented) {\n      return;\n    }\n    e.preventDefault();\n  };\n  const handleGestureChangeForSafari = (e: any) => {\n    if (e.defaultPrevented) {\n      return;\n    }\n    e.preventDefault();\n  };\n  const handleTouchMove = (e: TouchEvent) => {\n    if (e.defaultPrevented) {\n      return;\n    }\n    if (e.touches.length === 2) {\n      e.preventDefault();\n    }\n  };\n\n  document.addEventListener('wheel', handleWheel, { passive: false });\n  document.addEventListener('gesturestart', handleGestureStartForSafari);\n  document.addEventListener('gesturechange', handleGestureChangeForSafari);\n  document.addEventListener('touchmove', handleTouchMove, { passive: false });\n\n  return () => {\n    document.removeEventListener('wheel', handleWheel);\n    document.removeEventListener('gesturestart', handleGestureStartForSafari);\n    document.removeEventListener('gesturechange', handleGestureChangeForSafari);\n    document.removeEventListener('touchmove', handleTouchMove);\n  };\n}\n"],"mappings":";;;;;;AAEA;;;;;;;AAOA,SAAgBA,sBAAsBA,CAAA;EACpC,MAAMC,WAAW,GAAIC,CAAa,IAAI;IACpC,IAAIA,CAAC,CAACC,gBAAgB,EAAE;MACtB;;IAGF;IACA;IACA;IACA,IAAID,CAAC,CAACE,OAAO,EAAE;MACbF,CAAC,CAACG,cAAc,EAAE;;EAEtB,CAAC;EACD,MAAMC,2BAA2B,GAAIJ,CAAM,IAAI;IAC7C,IAAIA,CAAC,CAACC,gBAAgB,EAAE;MACtB;;IAEFD,CAAC,CAACG,cAAc,EAAE;EACpB,CAAC;EACD,MAAME,4BAA4B,GAAIL,CAAM,IAAI;IAC9C,IAAIA,CAAC,CAACC,gBAAgB,EAAE;MACtB;;IAEFD,CAAC,CAACG,cAAc,EAAE;EACpB,CAAC;EACD,MAAMG,eAAe,GAAIN,CAAa,IAAI;IACxC,IAAIA,CAAC,CAACC,gBAAgB,EAAE;MACtB;;IAEF,IAAID,CAAC,CAACO,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;MAC1BR,CAAC,CAACG,cAAc,EAAE;;EAEtB,CAAC;EAEDM,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAEX,WAAW,EAAE;IAAEY,OAAO,EAAE;EAAK,CAAE,CAAC;EACnEF,QAAQ,CAACC,gBAAgB,CAAC,cAAc,EAAEN,2BAA2B,CAAC;EACtEK,QAAQ,CAACC,gBAAgB,CAAC,eAAe,EAAEL,4BAA4B,CAAC;EACxEI,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEJ,eAAe,EAAE;IAAEK,OAAO,EAAE;EAAK,CAAE,CAAC;EAE3E,OAAO,MAAK;IACVF,QAAQ,CAACG,mBAAmB,CAAC,OAAO,EAAEb,WAAW,CAAC;IAClDU,QAAQ,CAACG,mBAAmB,CAAC,cAAc,EAAER,2BAA2B,CAAC;IACzEK,QAAQ,CAACG,mBAAmB,CAAC,eAAe,EAAEP,4BAA4B,CAAC;IAC3EI,QAAQ,CAACG,mBAAmB,CAAC,WAAW,EAAEN,eAAe,CAAC;EAC5D,CAAC;AACH;AA7CAO,OAAA,CAAAf,sBAAA,GAAAA,sBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}